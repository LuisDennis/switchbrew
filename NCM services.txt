NCM contains services for internal file path and content management.

= Location Resolver services =
== lr ==
This is "nn::lr::ILocationResolverManager".

{| class="wikitable" border="1"
|-
! Cmd || Name || Arguments || Notes
|-
| 0 || GetLocationResolver || [[Filesystem_services#StorageId|StorageID]] ||
|-
| 1 || GetRegisteredLocationResolver || None || 
|-
| 2 || CheckStorage || [[Filesystem_services#StorageId|StorageID]] ||
|-
| 3 || GetAddOnContentLocationResolver || None  ||
|}

The only sysmodules which use this service are [[Filesystem_services|FS]], [[Loader_services|Loader]], and [[NS_Services|NS]]. [[boot2]] has access but doesn't use it.

=== ILocationResolver ===
This is "nn::lr::ILocationResolver".

{| class="wikitable" border="1"
|-
! Cmd || Name || Arguments || Notes
|-
| 0 || GetProgramNcaPath || u64 TID + C descriptor || Used for [[NCA_Content_FS#NCA-type1|NCA-type1]].
|-
| 1 || SetProgramNcaPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] || Used for [[NCA_Content_FS#NCA-type1|NCA-type1]].
|-
| 2 || GetUserControlNcaPath || u64 TID + C descriptor || Used for [[NCA_Content_FS#NCA-type3|NCA-type3]] (gamecard only?).
|-
| 3 || GetDocHtmlNcaPath || u64 TID + C descriptor || Used for [[NCA_Content_FS#NCA-type4|NCA-type4]].
|-
| 4 || GetControlNcaPath || u64 TID + C descriptor || Used for [[NCA_Content_FS#NCA-type3|NCA-type3]]. Stubbed, only returns error 0x608.
|-
| 5 || SetControlNcaPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] || Used for [[NCA_Content_FS#NCA-type3|NCA-type3]].
|-
| 6 || SetDocHtmlNcaPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] || Used for [[NCA_Content_FS#NCA-type4|NCA-type4]].
|-
| 7 || GetInfoHtmlNcaPath || u64 TID + C descriptor || Used for [[NCA_Content_FS#NCA-type5|NCA-type5]].
|-
| 8 || SetInfoHtmlNcaPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] || Used for [[NCA_Content_FS#NCA-type5|NCA-type5]].
|-
| 9 || ClearLocationResolver || None || Clears all NCA paths set.
|}

These get-commands load the [[Filesystem_services|ContentPath]] from linked-lists in memory using the input titleID. The set-commands add a new entry to the list, if a matching entry is found it's removed first. ClearLocationResolver frees all entries in all of these linked-lists. The ContentPath is only used with memcpy() here with size=0x300, nothing more.
 
The set commands always return 0. When the get-commands fail to find an entry for the specified titleID, 0x408 is returned for GetProgramNcaPath, while the rest of the commands return 0xA08.

=== IRegisteredLocationResolver ===
This is "nn::lr::IRegisteredLocationResolver".

This works like [[#ILocationResolver]], but only two types of NCA paths can be gotten/set. In addition, each type has a fallback path that can be set for a single title ID at a time.

{| class="wikitable" border="1"
|-
! Cmd || Name || Arguments || Notes
|-
| 0 || GetPatchType0NcaPath || u64 TID + C descriptor || Used for [[NCA_Content_FS#NCA-type1|NCA-type1]].
|-
| 1 || RegisterPatchType0FallbackPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] || Sets the Type 0 fallback TID and path to the provided arguments.
|-
| 2 || UnregisterPatchType0FallbackPath || u64 TID || If the Type 0 fallback TID is == argument TID, unregisters the fallback path. Otherwise, noop.
|-
| 3 || SetPatchType0NcaPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] ||
|-
| ([[2.0.0]]+) 4 || GetPatchType1NcaPath || u64 TID + C descriptor ||
|-
| ([[2.0.0]]+) 5 || RegisterPatchType1FallbackPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] || Sets the Type 1 fallback TID and path to the provided arguments.
|-
| ([[2.0.0]]+) 6 || UnregisterPatchType1FallbackPath || u64 TID || If the Type 1 fallback TID is == argument TID, unregisters the fallback path. Otherwise, noop.
|-
| ([[2.0.0]]+) 7 || SetPatchType1NcaPath || u64 TID + X descriptor [[Filesystem_services#ContentPath|ContentPath]] ||
|}

=== IAddOnContentLocationResolver ===
This is "nn::lr::IAddOnContentLocationResolver".

{| class="wikitable" border="1"
|-
! Cmd || Name || Arguments || Notes
|-
| 0 || GetAddOnContentNcaPath || u64 TID + C descriptor || 
|-
| 1 || RegisterAddOnContent || [[Filesystem_services#StorageId|StorageID]] + u64 TID || 
|-
| 2 || ClearAddOnContentLocationResolver || None || Clears all registered titles here.
|}

= Content Manager services =
== ncm ==
This is "nn::ncm::IContentManager".

{| class="wikitable" border="1"
|-
! Cmd || Name || Notes
|-
| 0 || CreatePlaceholderAndRegisteredDirectoriesForMediaId || Takes a [[Filesystem_services#StorageId|StorageID]].
|-
| 1 || CreateSaveDataDirectoryForMediaId || Takes a [[Filesystem_services#StorageId|StorageID]].
|-
| 2 || GetExistsPlaceholderAndRegisteredDirectoriesForMediaId || Takes a [[Filesystem_services#StorageId|StorageID]].
|-
| 3 || GetExistsSaveDataDirectoryForMediaId || Takes a [[Filesystem_services#StorageId|StorageID]].
|-
| 4 || GetIContentStorage || Takes a [[Filesystem_services#StorageId|StorageID]].
|-
| 5 || GetIContentMetaDatabase || Takes a [[Filesystem_services#StorageId|StorageID]].
|-
| ([[1.0.0]]) 6 || CloseAndLockIContentStorage || Takes a [[Filesystem_services#StorageId|StorageID]]. Calls IContentStorage->CloseAndFlushStorage().
|-
| ([[1.0.0]]) 7 || CloseAndLockIContentMetaDatabase || Takes a [[Filesystem_services#StorageId|StorageID]].  Calls IContentMetaDatabase->CloseMetaDatabase().
|-
| 8 || DeleteSaveDataForMediaId || Takes a [[Filesystem_services#StorageId|StorageID]], and deletes the associated savedata.
|-
| (2.0.0+?) 9 || MountStorageForMediaId ||
|-
| (2.0.0+?) 10 || UnmountStorageForMediaId ||
|-
| (2.0.0+?) 11 || MountDatabaseForMediaId ||
|-
| (2.0.0+?) 12 || UnmountDatabaseForMediaId ||
|}

All of the above cmds takes a u8 as input.

=== IContentStorage ===
This is "nn::ncm::IContentStorage".

{| class="wikitable" border="1"
|-
! Cmd || Name || Notes
|-
| 0 || [[#GetUUID]] || Returns a random UUID for the Content Storage.
|-
| 1 || CreatePlaceholderEntryAndRegisteredDirectoryEntry || Takes two [[#NcaID]]s, and a u64 filesize.
|-
| 2 || DeletePlaceholderEntry || Takes a [[#NcaID]].
|-
| 3 || DoesPlaceholderEntryExist ||  Takes a [[#NcaID]].
|-
| 4 || WritePlaceholderEntry || Takes a [[#NcaID]], a u64-offset, and type 5 buffer. Writes the buffer to the file for the NcaID's placeholder path at the specified offset.
|-
| 5 || MovePlaceholderToRegistered || Takes two [[#NcaID]]s, moves the Placeholder NCA content to the registered NCA path.
|-
| 6 || DeleteRegisteredEntry || Takes a [[#NcaID]].
|-
| 7 || DoesRegisteredEntryExist || Takes a [[#NcaID]].
|-
| 8 || GetPathForRegisteredEntry || Takes a [[#NcaID]]. Returns a [[Filesystem_services#ContentPath|Content Path]].
|-
| 9 || GetPathForPlaceholderEntry || Takes a [[#NcaID]]. Returns a [[Filesystem_services#ContentPath|Content Path]].
|-
| 10 || CleanPlaceholderDirectory || Deletes and re-creates the Placeholder directory.
|-
| 11 || GetNumberOfRegisteredEntries || This is like [[#GetRegisteredEntries]], but for the Placeholder directory.
|-
| 12 || [[#GetNumberOfRegisteredEntries]] ||
|-
| 13 || [[#GetRegisteredEntries]] ||
|-
| 14 || [[#GetRegisteredEntrySize]] || 
|-
| 15 || CloseAndFlushStorage || Closes/Flushes all resources for the storage, and causes all future IPC commands to the current session to return error 0xC805.
|-
| 16 || || Takes three 0x10-sized entries.
|-
| 17 || SetPlaceholderEntrySize || Takes a [[#NcaID]], and a u64 size
|-
| 18 || [[#ReadRegisteredEntryRaw]] ||
|-
| 19 || GetPlaceholderEntryRightsID || Gets the Rights ID for the [[#NcaID]]'s placeholder path.
|-
| 20 || GetRegisteredEntryRightsID || Gets the Rights ID for the [[#NcaID]]'s registered path
|-
| 21 || WriteRegisteredPathForDebug || Takes a [[#NcaID]], a u64 offset, and a type 5 buffer. On debug units, writes the buffer to the NCA's registered path. On retail units, this just aborts.
|-
| 22 || GetFreeSpace || Gets free space for the storage.
|-
| 23 || GetTotalSpace || Gets total space for the storage.
|-
| 24 || FlushStorage || Flushes resources for the storage without closing it.
|}

==== GetUUID ====
Calls  nn::util::GenerateUuid(), which internally calls nn::os::GenerateRandomBytes(16);

==== GetNumberOfRegisteredEntries ====
Writes the total number of entries which can be read by GetEntries, to cmdreply <SFCO_offset>+0x10.

==== GetRegisteredEntries ====
Takes an output buffer, u32 offset and gets all entries starting at that offset.
Returns number of entries read.

Each entry is a [[#NcaID]].

The total read entries is exactly the same as the number of "<hex>.nca" directories in the storage FS(or at least under the "registered" directory?).

==== GetRegisteredEntrySize ====
Takes a [[#NcaID]] as input.

Returns the total size readable by ReadEntryRaw. This is the same as the size-field in the [[NAX0]] "<NcaID>.nca/00" file.

==== ReadRegisteredEntryRaw ====
Takes an output buffer, a [[#NcaID]] as input, and a u64 file offset.

Returns encrypted looking data from the content in the [[NAX0]]. Doesn't match the encrypted raw data in the [[NAX0]] "<NcaID>.nca/00" file. Seems to be at least one crypto layer below the initial NAX0 layer, since the data doesn't change after NAX0 recreation.

Manually modifying the content in the NAX0(starting at offset 0x4000) results in different output data being returned by this cmd. Changing any data within the first 0x10-bytes results in the entire 0x10-byte block changing. Likewise for offset 0x4010 size 0x1, entire 0x10-byte block at 0x4010 changes. Changing the first 0x20-bytes at 0x4000 to zeros has the same combined changed output, as when offset 0x4000 size 0x10 and offset 0x4010 size 0x10 were changed to zeros separately. Output BlockA and BlockB are completely different, where the raw NAX0 data for those blocks are all-zero.

Overwriting the entire raw NAX0 content with zeros results in output data which doesn't seem to have any duplicate blocks/data. When changing the previously mentioned raw content for the first 8 blocks to last-block-byte = 1<<i, where i is 0-7, none of the changed output blocks match any output blocks from the previously mentioned output(all-zero raw content).

This implies that that an AES mode is being used which isn't CTR, where changing data in one block doesn't affect other blocks.

See GetEntrySize for the total size readable with this.

=== IContentMetaDatabase ===
This is "nn::ncm::IContentMetaDatabase".

{| class="wikitable" border="1"
|-
! Cmd || Name || Notes
|-
| 0 || InsertContentRecords || Takes a [[NCA#Meta_records|Meta Record]], a type-5 [[NCA#Content_records|Content Records]] buffer and a u64 size.
|-
| 1 || ReadContentRecords || Takes a [[NCA#Meta_records|Meta Record]], a type-6 buffer to write [[NCA#Content_records|Content Records]] to and a u64 size. Returns the actual Content Records size read.
|-
| 2 || RemoveContentRecords || Takes a [[NCA#Meta_records|Meta Record]], and removes the associated record.
|-
| 3 || GetContentNcaId || Takes a [[NCA#Meta_records|Meta Record]] and a u8 [[#Title_Types|Title Type]]. Returns a [[#NcaID]].
|-
| 4 || || Takes a type-6 buffer, each entry being 24 bytes, 0x10-sized entry and a u32. Returns a u32.
|-
| 5 || Iterate || Takes a type-6 buffer, each entry being 16 bytes, a 0x10-sized entry, and a u32. Returns a u32.
|-
| 6 || GetMetaRecord || Takes a u64 title id, and returns the [[NCA#Meta_records|Meta Record]] with the highest version field for that title id.
|-
| 7 || [[#GetTitleUpdateRecords]] ||
|-
| 8 || IsMetaRecordPresent || Takes a [[NCA#Meta_records|Meta Record]] and returns whether that record is present in the database.
|-
| 9 || AreMetaRecordsPresent || Takes a type-5 buffer containing [[NCA#Meta_records|Meta Records]] (code assumes there are size/sizeof(meta_record) records in the buffer), and returns whether all of those records are present in the database.
|-
| 10 || GetBaseTitleId || Takes a [[NCA#Meta_records|Meta Record]], and returns the base title id for that record.
|-
| 11 || || Takes a 0x10-sized entry. Returns a u32.
|-
| 12 || || Takes a 0x10-sized entry. Returns a u64.
|-
| 13 || CloseMetaDatabase ||  Closes the meta database, and causes all future IPC commands to the current session to return error 0xDC05.
|-
| 14 || || Takes a type-6 byte buffer, and a type-5 buffer with each entry being 16 bytes.
|-
| 15 || SaveMetaDatabase || Flushes the in-memory database to savedata.
|-
| 16 || || Takes two 0x10-sized entries. Returns a bool/u8.
|-
| 17 || [[#GetUpdateTitleList]] || 
|-
| 18 || || Takes a 0x10-sized entry. Returns a bool/u8.
|-
| 19 || || Takes a 0x10-sized entry. Returns a u32.
|}


==== GetTitleUpdateRecords ====
Each 24-byte entry is as follows:
  [[NCA#Meta_records|meta_record]] meta_record;
  u64    base_title_id;

This function takes in a type 6 buffer to write entries to, and a u8 "filter" [[#Title_Types|type]]. If filter is zero, all update records will be copied to to the output buffer (space permitting). Otherwise, only titles with type == filter_type will be copied to the output buffer.

This func returns a u32 num_entries_written, and a u32 num_entries_total.


==== GetUpdateTitleList ====
Takes a type-6 output buffer, each entry being 0x10-byte bytes, a u32 entryoffset and a 0x10-sized entry. Returns a u32 for total_read_entries.

The input entry is the output entry from [[#GetTitleIdInfo]] starting at the TID. The output 0x10-bytes entries are the same as the output from [[#GetTitleIdInfo]] starting at the TID. However, "pad[0]" is used for something else it seems?(0 for everything except for TID [[Title_list|010000000000081B]], where it's 1)

See [[NCA#Meta_records]].

This reads the titlelist stored in the specified title, normally a title with title-type 3, which is sysupdate-title 0100000000000816. Returns 0 with total_read_entries=0 when used with other title(s).

=== NcaID ===
This is a 0x10-byte entry. This is originally from the hex portion of "<hex>.nca" directory-names from this storage FS(like [[SD_Filesystem|SD]]).

The NcaID is the same as the first 0x10-bytes from the calculated SHA256 hash, from hashing the entire output from ReadEntryRaw.

=== Enums ===
==== Title Types ====

{| class="wikitable" border="1"
|-
! Value
! Description
|-
| 0x01
| System Programs ([[Title_list#System_Modules|System Modules]] or [[Title_list#System_Applets|System Applets]])
|-
| 0x02
| [[Title_list#System_Data_Archives|System Data Archives]]
|-
| 0x03
| System Update
|-
| 0x04
| [[Title_list|Firmware package A]]
|-
| 0x05
| [[Title_list|Firmware package B]]
|-
| 0x80
| Regular application
|-
| 0x81
| Update title
|-
| 0x82
| Add-on content
|-
| 0x83
| Delta title
|-
|}

== ncm:v ==

[[Category:Services]]