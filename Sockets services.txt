= bsd:u / bsd:s =
This is "nn::socket::sf::IClient".

All the services commands but the first two return -1 on failure and set errno when that happens. Although Nintendo has the FreeBSD kernel's to socket stack, '''the errno macro definitions being in use actually come from Linux (and not from FreeBSD as one would expect!)'''.

{| class="wikitable" border="1"
|-
! Cmd || Name
|-
| 0  || RegisterClient (Initialize)
|-
| 1  || StartMonitoring
|-
| 2  || [[#Socket]]
|-
| 3  || [[#Socket|#SocketExempt]]
|-
| 4  || [[#Open]]
|-
| 5  || Select
|-
| 6  || Poll
|-
| 7  || [[#Sysctl]]
|-
| 8  || Recv
|-
| 9  || RecvFrom
|-
| 10 || Send
|-
| 11 || SendTo
|-
| 12 || Accept
|-
| 13 || Bind
|-
| 14 || Connect
|-
| 15 || GetPeerName
|-
| 16 || GetSockName
|-
| 17 || GetSockOpt
|-
| 18 || Listen
|-
| 19 || [[#Ioctl]]
|-
| 20 || [[#Fcntl]]
|-
| 21 || SetSockOpt
|-
| 22 || Shutdown
|-
| 23 || ShutdownAllSockets
|-
| 24 || Write
|-
| 25 || Read
|-
| 26 || Close
|-
| 27 || [[#DuplicateSocket]]
|-
| 28 || GetResourceStatistics
|-
| 29 || [3.0.0+] RecvMMsg
|-
| 30 || [3.0.0+] SendMMsg
|}

== Initalize ==

Takes a [[#BsdBufferConfig]] (made-up name), the PID, the size of the transfer memory and a copy-handle of the latter.

=== BsdBufferConfig ===

 /// Configuration structure for bsdInitalize
 typedef struct  {
     u32 version;                ///< Observed 1 on 2.0 LibAppletWeb, 2 on 3.0.
 
     u32 tcp_tx_buf_size;        ///< Size of the TCP transfer (send) buffer (initial or fixed).
     u32 tcp_rx_buf_size;        ///< Size of the TCP recieve buffer (initial or fixed).
     u32 tcp_tx_buf_max_size;    ///< Maximum size of the TCP transfer (send) buffer. If it is 0, the size of the buffer is fixed to its initial value.
     u32 tcp_rx_buf_max_size;    ///< Maximum size of the TCP receive buffer. If it is 0, the size of the buffer is fixed to its initial value.
 
     u32 udp_tx_buf_size;        ///< Size of the UDP transfer (send) buffer (typically 0x2400 bytes).
     u32 udp_rx_buf_size;        ///< Size of the UDP receive buffer (typically 0xA500 bytes).
 
     u32 sb_efficiency;          ///< Number of buffers for each socket (standard values range from 1 to 8).
 } BsdBufferConfig;


The transfer memory must be larger than a the computed size below. Should the transfer memory be smaller than that, the BSD sockets service would only send ZeroWindow packets (for TCP), resulting in a transfer rate not exceeding 1 byte/s.

 static size_t _bsdGetTransferMemSizeForBufferConfig(const BsdBufferConfig *config)
 {
     u32 tcp_tx_buf_max_size = config->tcp_tx_buf_max_size != 0 ? config->tcp_tx_buf_max_size : config->tcp_tx_buf_size;
     u32 tcp_rx_buf_max_size = config->tcp_rx_buf_max_size != 0 ? config->tcp_rx_buf_max_size : config->tcp_rx_buf_size;
     u32 sum = tcp_tx_buf_max_size + tcp_rx_buf_max_size + config->udp_tx_buf_size + config->udp_rx_buf_size;
 
     sum = ((sum + 0xFFF) >> 12) << 12; // page round-up
     return (size_t)(config->sb_efficiency * sum);
 }

== Socket ==
FreeBSD's <code>socket</code> command.
<code>bsd:u</code> disallows the usage of the <code>SOCK_SEQPACKET</code> and <code>SOCK_RAW</code> types, with the exception of <code>(AF_INET, SOCK_RAW, IPPROTO_ICMP)</code> (IPv4 <code>ping</code>), <code>bsd:s</code> needs to be used for those.

The only registered domains are <code>AF_INET</code> and <code>AF_ROUTE</code>.

SocketExempt: same as socket but the socket is immediately shutdown (disconnected) on creation.

== Open ==
FreeBSD's <code>open</code> command, limited to opening <code>/dev/bpf</code>. This can be used, for example, to enable promiscuous mode, see FreeBSD's <code>/dev/bpf</code> for more details.

== Sysctl ==

FreeBSD's <code>sysctl</code> command. Privileged operations are reserved for <code>bsd:s</code>.
<code>CTL_NET</code>, <code>CTL_VM</code>, <code>CTL_KERN</code> and <code>CTL_DEBUG</code> commands are implemented (?).

== Ioctl ==
FreeBSD's <code>ioctl</code> function. The following ioctls are whitelisted, refer to FreeBSD's headers for more details: SIOCATMARK, BIOCGBLEN, BIOCSETF BIOCIMMEDIATE, BIOCSETIF, BIOCVERSION, FIONSPACE, FIONWRITE, FIONREAD, SIOCGETSGCNT, SIOCGIFMETRIC, SIOCSIFMETRIC, SIOCDIFADDR, SIOCGIFINDEX, SIOCGIFADDR, SIOCGIFCONF, SIOCGIFNETMASK, SIOCAIFADDR, SIOCGIFMTU, SIOCSIFMTU, SIOCGIFMEDIA, SIOCSIFLLADDR and SIOCGIFXMEDIA.

Nintendo use the following definition (hence changing all ioctls using this structure):
 struct bpf_program {
 	u_int bf_len;
 	struct bpf_insn bf_insns[BPF_MAXINSNS]; // [512]. This is a pointer in the official structure
 };

== Fcntl ==
FreeBSD's <code>fcntl</code>, limited to <code>F_GETFL</code> and <code>F_SETFL</code> with <code>O_NONBLOCK</code>.

== DuplicateSocket ==
Takes a socket file descriptor and an unused u64. Duplicates the socket (FreeBSD's <code>dup</code>). Reserved to <code>bsd:s</code>.

= sfdnsres =
This is "nn::socket::resolver::IResolver".

This service uses <code>bionic/libc/dns</code> to perform its tasks.

{| class="wikitable" border="1"
|-
! Cmd || Name
|-
| 0 || SetDnsAddressesPrivate (stubbed, returns 0x7FE03)
|-
| 1 || GetDnsAddressPrivate (stubbed, returns 0x7FE03)
|-
| 2 || GetHostByName
|-
| 3 || GetHostByAddr
|-
| 4 || GetHostStringError
|-
| 5 || GetGaiStringError
|-
| 6 || [[#GetAddrInfo]]
|-
| 7 || GetNameInfo
|-
| 8 || RequestCancelHandle
|-
| 9 || CancelSocketCall
|-
| 10 || ?
|-
| 11 || [[#ClearDnsIpServerAddressArray]] (made-up name)
|}

== GetAddrInfo ==

Takes three type 5 buffers (host, port, and hints), and a type 6 buffer (the output addrinfos). Also takes a u8 (padded to 4 bytes so the next raw parameter can align), a u32, and a u64. The u8 is a boolean for whether to enable "nsd resolve" (1) or not (0). Not sure what the u32 is. It seems to either come from a parameter to <tt>GetAddrInfo</tt> or be zero. The u64 is most likely a placeholder for the server to copy the PID into and should be zero. Both hints and the output buffer contain serialized addrinfo chains. The hints buffer is sized 0x400 bytes long by default, and the output buffer 0x1000 bytes.

=== Addrinfo Serialization Format ===

Each struct addrinfo in the linked list is serialized according to this format and then written to the buffer. All numbers are in network byte order.

{| class="wikitable" border="1"
|-
! Size (bytes) || Name || Notes
|-
| 4 || Magic || Needs to be 0xBEEFCAFE. Seriously.
|-
| 4 || ai_flags ||
|-
| 4 || ai_family ||
|-
| 4 || ai_socktype ||
|-
| 4 || ai_protocol ||
|-
| 4 || ai_addrlen ||
|-
| ai_addrlen ? ai_addrlen : 4 || ai_addr ||
|-
| null-terminated string || ai_canonname ||
|}

If <tt>ai_addrlen</tt> is zero, <tt>ai_addr</tt> will occupy 4 bytes.

{| class="wikitable" border="1"
|-
! Size (bytes) || Name || Notes
|-
| 4 || ai_addr
|}

If <tt>ai_family</tt> is recognized as AF_INET6 (28) or AF_INET (2), <tt>ai_addr</tt> is read as <tt>struct sockaddr_in</tt> or <tt>struct sockaddr_in6</tt>. Otherwise, it's just read as <tt>u8[ai_addrlen]</tt>.

The list should be terminated with a sentinel four-byte zero value.

== ClearDnsIpServerAddressArray ==
This function clears <code>nn::socket::resolver::g_DnsIpServerAddressArray</code>, setting its length to 0 as well. The array initially contains IPs filled by <code>bsdconfig</code>, a privileged service handling DHCP and such.

Takes no arguments, doesn't return anything, never fails.

= nsd:u / nsd:a =
This is "nn::nsd::detail::IManager".

{| class="wikitable" border="1"
|-
! Cmd || Name
|-
| 10 || GetSettingName
|-
| 11 || GetEnvironmentIdentifier
|-
| 12 || GetDeviceId
|-
| 13 || DeleteSettings
|-
| 14 || ImportSettings
|-
| 20 || Resolve
|-
| 21 || ResolveEx
|-
| 30 || GetNasServiceSetting
|-
| 31 || GetNasServiceSettingEx
|-
| 40 || GetNasRequestFqdn
|-
| 41 || GetNasRequestFqdnEx
|-
| 42 || GetNasApiFqdn
|-
| 43 || GetNasApiFqdnEx
|-
| 50 || GetCurrentSetting
|-
| 60 || [[#ReadSaveDataFromFsForTest]]
|-
| 61 || [[#WriteSaveDataToFsForTest]]
|-
| 62 || [[#DeleteSaveDataOfFsForTest]]
|}

== ReadSaveDataFromFsForTest ==
Requires the <code>nsd!test_mode</code> setting to be equal to 1.

Mounts the system save data for bsdsockets as <code>nsdsave</code> and reads from <code>nsd:/file</code> to the specified buffer, at the specified size and offset with no checks whatsoever. <code>nsdsave</code> is then unmounted.

== WriteSaveDataToFsForTest ==
Requires the <code>nsd!test_mode</code> setting to be equal to 1.

Mounts the system save data for bsdsockets as <code>nsdsave</code> and writes to <code>nsd:/file</code> (appending is allowed) using the specified buffer, at the specified size and offset, with no checks whatsoever. <code>nsdsave</code> is then commited and unmounted.

== DeleteSaveDataOfFsForTest ==
Requires the <code>nsd!test_mode</code> setting to be equal to 1.

Deletes the system save data for bsdsockets.