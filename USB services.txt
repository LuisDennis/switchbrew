One symbol in USB-sysmodule is: "vtable for nn::usb::detail::UsbComplexTegra21x".

= usb:ds =
Used for Switch<>PC USB comms, aka Switch-as-device.
This service is used during [[Factory Setup|factory setup]] by [[Manu Services|manu]].

This service session is used as an IPC [[IPC_Marshalling|domain]] by [[Manu Services|manu]]. All of these {get-session} commands also return an output u8 and the u32 <[[IPC_Marshalling|domainID]]>, for using those sessions as domains.

{| class="wikitable" border="1"
|-
! Cmd || Name || Notes
|-
| 0 || [[#BindComplex]] || 
|-
| 1 || [[#BindClientProcess]] || 
|-
| 2 || [[#GetDsInterface]] || 
|-
| 3 || [[#GetStateChangeEvent]] || 
|-
| 4 || || No input. Returns an output u32.
|-
| 5 || [[#SetVidPidBcd]] || 
|}

Initialization done by [[Manu Services|manu]]:
* Initial service init:
** Get service/etc.
** Uses [[#BindComplex]].
** Uses [[#BindClientProcess]].
** Uses [[#GetStateChangeEvent]].
** Uses [[#SetVidPidBcd]].
* Interface init:
** Uses [[#GetDsInterface]], then uses commands from that with the rest of the following.
** Uses [[#GetSetupEvent]].
** Uses [[#GetCtrlInCompletionEvent]].
** Uses [[#GetCtrlOutCompletionEvent]].
* Initializes two endpoints via using [[#GetDsEndpoint]] twice.

== Configuration ==
The following is the default USB config strings, when the usbds service wasn't used. These can be set with [[#SetVidPidBcd]]. The default string for Product is loaded from [[Settings_services|settings]] config.
  Product: Nintendo Switch
  Manufacturer: Nintendo
  SerialNumber: SerialNumber

The following is the default <code>lsusb -v {...}</code> output when the usbds service wasn't used:

  Bus 003 Device 006: ID 057e:2000 Nintendo Co., Ltd 
  Couldn't open device, some information will be missing
  Device Descriptor:
    bLength                18
    bDescriptorType         1
    bcdUSB               2.00
    bDeviceClass            0 (Defined at Interface level)
    bDeviceSubClass         0 
    bDeviceProtocol         0 
    bMaxPacketSize0        64
    idVendor           0x057e Nintendo Co., Ltd
    idProduct          0x2000 
    bcdDevice            1.00
    iManufacturer           1 
    iProduct                2 
    iSerial                 3 
    bNumConfigurations      1
    Configuration Descriptor:
      bLength                 9
      bDescriptorType         2
      wTotalLength           34
      bNumInterfaces          1
      bConfigurationValue     1
      iConfiguration          0 
      bmAttributes         0xc0
        Self Powered
      MaxPower              {...}
      Interface Descriptor:
        bLength                 9
        bDescriptorType         4
        bInterfaceNumber        0
        bAlternateSetting       0
        bNumEndpoints           1
        bInterfaceClass         3 Human Interface Device
        bInterfaceSubClass      0 No Subclass
        bInterfaceProtocol      0 None
        iInterface              0 
          HID Device Descriptor:
            bLength                 9
            bDescriptorType        33
            bcdHID               2.00
            bCountryCode            0 Not supported
            bNumDescriptors         1
            bDescriptorType        34 Report
            wDescriptorLength      26
           Report Descriptors: 
             ** UNAVAILABLE **
        Endpoint Descriptor:
          bLength                 7
          bDescriptorType         5
          bEndpointAddress     0x81  EP 1 IN
          bmAttributes            3
            Transfer Type            Interrupt
            Synch Type               None
            Usage Type               Data
          wMaxPacketSize     0x0001  1x 1 bytes
          bInterval              16

== BindComplex ==
Takes an u32 ('''complexId'''). [[Manu_Services|Manu]] sends 0x02.

== BindClientProcess ==
Takes 1 copy-handle for the current process (0xFFFF8001).

== GetDsInterface ==
Takes 2 type-5 buffers and returns an [[#IDsInterface]]. [[Manu_Services|Manu]] sends a 0x09-byte command (e.g.: 0x09, 0x04, 0x04, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00) in the first buffer and a string ("usb") in the second buffer.

== GetStateChangeEvent ==
Returns an event handle for state changes.

== SetVidPidBcd ==
Takes a type-5 buffer with 0x66 bytes of USB descriptor data (see [[Manu_Services#manu|manu]]).

{| class="wikitable" border="1"
|-
! Offset || Size || Description
|-
| 0x0 || 0x2 || VID (idVendor)
|-
| 0x2 || 0x2 || PID (idProduct)
|-
| 0x4 || 0x2 || bcdUSB
|-
| 0x6 || 0x20 || Manufacturer
|-
| 0x26 || 0x20 || Product
|-
| 0x46 || 0x20 || SerialNumber
|}

The last 3 blocks are strings. The data following each string is all-zero, for padding to size 0x20.

== IDsInterface ==
{| class="wikitable" border="1"
|-
! Cmd || Name
|-
| 0 || [[#GetDsEndpoint]]
|-
| 1 || [[#GetSetupEvent]]
|-
| 2 || 
|-
| 3 || [[#EnableInterface]]
|-
| 4 || [[#DisableInterface]]
|-
| 5 || 
|-
| 6 || 
|-
| 7 || [[#GetCtrlInCompletionEvent]]
|-
| 8 || 
|-
| 9 || [[#GetCtrlOutCompletionEvent]]
|-
| 10 || 
|-
| 11 || 
|}

=== GetDsEndpoint ===
Takes a type-5 buffer and returns an [[#IDsEndpoint]]. [[Manu_Services|Manu]] uses this twice for getting two endpoint sessions, with the following 0x7-byte buffer data:
* First endpoint: 0x07, 0x05, 0x80, 0x02, 0x00, 0x02, 0x00.
* Second endpoint: Same as above except byte2 is 0x00.

Each field is an u8, except for offset 0x4-0x5 which is an u16.

This structure matches [http://libusb.sourceforge.net/api-1.0/structlibusb__endpoint__descriptor.html libusb_endpoint_descriptor].

=== GetSetupEvent ===
Returns an event handle for interface setup changes.

=== EnableInterface ===
Takes no arguments. Enables the current interface.

=== DisableInterface ===
Takes no arguments. Disables the current interface.

=== GetCtrlInCompletionEvent ===
Returns an event handle for polling the completion of input control commands.

=== GetCtrlOutCompletionEvent ===
Returns an event handle for polling the completion of output control commands.

=== IDsEndpoint ===
{| class="wikitable" border="1"
|-
! Cmd || Name
|-
| 0 || [[#PostBufferAsync]]
|-
| 1 || 
|-
| 2 || 
|-
| 3 || [[#GetReportData]]
|-
| 4 || 
|-
| 5 || 
|}

==== PostBufferAsync ====
Takes an u32 ('''size''') and an u64 ('''buffer''').

==== GetReportData ====
Returns 0x84 bytes of report data from the endpoint.

= usb:hs =
General USB devices usage, used by hid-sysmodule and bsdsockets-sysmodule.

= usb:pd =
Only system-titles with access to this are [[PTM_services|PTM]] and [[AM_services|AM]].

= usb:pd:c =
USB-sysmodule symbols for this refer to "Cradle", which is the [[Dock]].

= usb:pm =
Presumably Power Management, only system-title using this is [[PTM_services|PTM]].